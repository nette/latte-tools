Test: Twig supports the in operator

{$bar in $foo ? OK : KO}
{=!$bar in $foo ? KO : OK}
{=!in_array($bar, $foo, true) ? KO : OK}
{=a in $bar ? OK : KO}
{=!in_array(c, $bar, true) ? OK : KO}
{='' in $bar ? OK : KO}
{='' in '' ? OK : KO}
{=!in_array(0, '', true) ? OK : KO}
{=!in_array(a, 0, true) ? OK : KO}
{0 in 0 ? OK : KO}

{=false in [0, 1] ? OK : KO}
{=true in [0, 1] ? OK : KO}
{0 in [0, 1] ? OK : KO}
{0 in [1, 0] ? OK : KO}
{='' in [0, 1] ? KO : OK}
{='' in [1, 0] ? KO : OK}
{0 in ['', 1] ? KO : OK}
{0 in [1, ''] ? KO : OK}

{='' in foo ? OK : KO}
{0 in foo ? KO : OK}
{=false in foo ? KO : OK}
{=false in 100 ? KO : OK}
{=true in 100 ? KO : OK}

{=[] in [true, false] ? OK : KO}
{=[] in [true, ''] ? KO : OK}
{=[] in [true, []] ? OK : KO}

{$resource ? OK : KO}
{$resource in (foo . $resource) ? KO : OK}
{$object in stdClass ? KO : OK}
{=[] in 'Array' ? KO : OK}
{$dir_object in (foo . $dir_object) ? KO : OK}

{=('' . $resource) in $resource ? KO : OK}
{=stdClass in $object ? KO : OK}
{='Array' in [] ? KO : OK}
{=('' . $dir_object) in $dir_object ? KO : OK}

{$resource in [('' . $resource)] ? KO : OK}
{$dir_object in [('' . $dir_object)] ? KO : OK}

{5 in 125 ? KO : OK}
{5 in 125 ? OK : KO}
{5 in 125 ? KO : OK}
{5 in 125 ? OK : KO}

{5.5 in 125.5 ? KO : OK}
{5.5 in '125.5' ? OK : KO}
{='5.5' in 125.5 ? KO : OK}

{$safe in [foo, bar] ? OK : KO}
{=fo in $safe ? OK : KO}

{$foo->not in [not] ? OK : KO}
{=(value|not) in ['not value'] ? OK : KO}
{=!in_array($foo->not, [not], true) ? KO : OK}
{=!in_array((value|not), ['not value'], true) ? KO : OK}
{=!in_array(value, ['not value'], true) ? OK : KO}
